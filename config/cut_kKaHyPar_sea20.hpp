#pragma once

#include <string>

std::string cut_kKaHyPar_sea20_config = "# general\n"
                                        "mode=direct\n"
                                        "objective=cut\n"
                                        "seed=-1\n"
                                        "cmaxnet=1000\n"
                                        "vcycles=0\n"
                                        "# main -> preprocessing -> min hash sparsifier\n"
                                        "p-use-sparsifier=true\n"
                                        "p-sparsifier-min-median-he-size=28\n"
                                        "p-sparsifier-max-hyperedge-size=1200\n"
                                        "p-sparsifier-max-cluster-size=10\n"
                                        "p-sparsifier-min-cluster-size=2\n"
                                        "p-sparsifier-num-hash-func=5\n"
                                        "p-sparsifier-combined-num-hash-func=100\n"
                                        "# main -> preprocessing -> community detection\n"
                                        "p-detect-communities=true\n"
                                        "p-detect-communities-in-ip=true\n"
                                        "p-reuse-communities=false\n"
                                        "p-max-louvain-pass-iterations=100\n"
                                        "p-min-eps-improvement=0.0001\n"
                                        "p-louvain-edge-weight=hybrid\n"
                                        "p-large-he-threshold=1000\n"
                                        "# main -> preprocessing -> large he removal\n"
                                        "p-smallest-maxnet-threshold=50000\n"
                                        "p-maxnet-removal-factor=0.01\n"
                                        "# main -> coarsening\n"
                                        "c-type=ml_style\n"
                                        "c-s=1\n"
                                        "c-t=160\n"
                                        "# main -> coarsening -> rating\n"
                                        "c-rating-score=heavy_edge\n"
                                        "c-rating-use-communities=true\n"
                                        "c-rating-heavy_node_penalty=no_penalty\n"
                                        "c-rating-acceptance-criterion=best_prefer_unmatched\n"
                                        "c-fixed-vertex-acceptance-criterion=fixed_vertex_allowed\n"
                                        "# main -> initial partitioning\n"
                                        "i-mode=recursive\n"
                                        "i-technique=multi\n"
                                        "# initial partitioning -> coarsening\n"
                                        "i-c-type=ml_style\n"
                                        "i-c-s=1\n"
                                        "i-c-t=150\n"
                                        "# initial partitioning -> coarsening -> rating\n"
                                        "i-c-rating-score=heavy_edge\n"
                                        "i-c-rating-use-communities=true\n"
                                        "i-c-rating-heavy_node_penalty=no_penalty\n"
                                        "i-c-rating-acceptance-criterion=best_prefer_unmatched\n"
                                        "i-c-fixed-vertex-acceptance-criterion=fixed_vertex_allowed\n"
                                        "# initial partitioning -> initial partitioning\n"
                                        "i-algo=pool\n"
                                        "i-runs=20\n"
                                        "# initial partitioning -> bin packing\n"
                                        "i-bp-algorithm=worst_fit\n"
                                        "i-bp-heuristic-prepacking=false\n"
                                        "i-bp-early-restart=true\n"
                                        "i-bp-late-restart=true\n"
                                        "# initial partitioning -> local search\n"
                                        "i-r-type=twoway_fm\n"
                                        "i-r-runs=-1\n"
                                        "i-r-fm-stop=simple\n"
                                        "i-r-fm-stop-i=50\n"
                                        "# main -> local search\n"
                                        "r-type=kway_fm_hyperflow_cutter\n"
                                        "r-runs=-1\n"
                                        "r-fm-stop=adaptive_opt\n"
                                        "r-fm-stop-alpha=1\n"
                                        "r-fm-stop-i=350\n"
                                        "# local_search -> flow scheduling and heuristics\n"
                                        "r-flow-execution-policy=exponential\n"
                                        "# local_search -> hyperflowcutter configuration\n"
                                        "r-hfc-size-constraint=mf-style\n"
                                        "r-hfc-scaling=16\n"
                                        "r-hfc-distance-based-piercing=true\n"
                                        "r-hfc-mbc=true\n";
